#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
#set -e

# debug
set -ex

# parse and derive params
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILD_DIR=$1
CACHE_DIR=$2
NETTLE_VERSION=3.6
P11_KIT_VERSION=0.23.20
UNBOUND_VERSION=1.10.1
LIBTASN1_VERSION=4.16.0
GNUTLS_VERSION=3.6.14

function indent() {
	c='s/^/       /'

	case $(uname) in
		Darwin)
			sed -l "$c"
			;;
		*)
			sed -u "$c"
			;;
	esac
}

function topic() {
	echo "-----> $*"
}



if
	[ -f $CACHE_DIR/.apt/bin/art ]
then
	rm -f $CACHE_DIR/.apt/bin/art
fi

# Store which STACK we are running on in the cache to bust the cache if it changes
if [ -f $CACHE_DIR/.apt/STACK ]; then
  CACHED_STACK=$(cat "$CACHE_DIR/.apt/STACK")
else
  CACHED_STACK=$STACK
fi

# Ensure we store the STACK in the cache for next time.
mkdir -p "$CACHE_DIR/.apt"
echo "$STACK" > "$CACHE_DIR/.apt/STACK"

if
	[[ $CACHED_STACK == $STACK ]]
then
	# STACK has not changed
	topic "Reusing cache"
else
	# STACK changed
	topic "Detected Stack changes, flushing cache"

	rm -rf $BUILDS_CACHE_DIR
fi



mkdir -p $BUILD_DIR/.apt



#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH|PERL5LIB|GUILE_LOAD_PATH|GUILE_LOAD_COMPILED_PATH)=' > "$LP_DIR/export"

export CPPFLAGS="-isystem /usr/lib/gcc/x86_64-linux-gnu/7/include"



if
	[ ! -f $CACHE_DIR/.apt/bin/art ]
then
	cd /tmp

	topic "Installing Nettle"
	wget -c https://ftp.gnu.org/gnu/nettle/nettle-$NETTLE_VERSION.tar.gz && \
		tar xvzf nettle-$NETTLE_VERSION.tar.gz                             && \
		rm -f nettle-$NETTLE_VERSION.tar.gz                                && \
		cd nettle-$NETTLE_VERSION                                          && \
		./configure --prefix=$BUILD_DIR/.apt/usr && make && make install   && cd ..


	topic "Installing libtasn1"
	wget -c https://ftp.gnu.org/gnu/libtasn1/libtasn1-$LIBTASN1_VERSION.tar.gz  && \
		tar xvzf libtasn1-$LIBTASN1_VERSION.tar.gz                                && \
		rm -f libtasn1-$LIBTASN1_VERSION.tar.gz                                   && \
		cd libtasn1-$LIBTASN1_VERSION                                             && \
		./configure --prefix=$BUILD_DIR/.apt/usr && make && make install          && cd ..


	topic "Installing p11-kit"
	wget -c https://github.com/p11-glue/p11-kit/releases/download/$P11_KIT_VERSION/p11-kit-$P11_KIT_VERSION.tar.xz && \
		tar xJf p11-kit-$P11_KIT_VERSION.tar.xz                                                                      && \
		rm -f p11-kit-$P11_KIT_VERSION.tar.xz                                                                        && \
		cd p11-kit-$P11_KIT_VERSION && ./configure --prefix=$BUILD_DIR/.apt/usr && make && make install              && cd ..


	topic "Installing Unbound"
	wget -c https://nlnetlabs.nl/downloads/unbound/unbound-$UNBOUND_VERSION.tar.gz && \
		tar xvzf unbound-$UNBOUND_VERSION.tar.gz                                     && \
		rm -f unbound-$UNBOUND_VERSION.tar.gz                                        && \
		cd unbound-$UNBOUND_VERSION                                                  && \
		./configure --prefix=$BUILD_DIR/.apt/usr && make && make install             && cd ..


	rm -r $BUILD_DIR/.apt/usr/lib/gcc/x86_64-linux-gnu/*
	for x in /usr/lib/gcc/x86_64-linux-gnu/*
	do
		ln -s "$x" $BUILD_DIR/.apt/usr/lib/gcc/x86_64-linux-gnu
	done


	topic "Installing GnuTLS"
	wget -c https://www.gnupg.org/ftp/gcrypt/gnutls/v${GNUTLS_VERSION%.*}/gnutls-$GNUTLS_VERSION.tar.xz && \
		tar xJf gnutls-$GNUTLS_VERSION.tar.xz                                                             && \
		rm -f gnutls-$GNUTLS_VERSION.tar.xz                                                               && \
		cd gnutls-$GNUTLS_VERSION                                                                         && \
		./configure --prefix=$BUILD_DIR/.apt/usr --enable-guile GUILE="$BUILD_DIR/.apt/usr/bin/guile" && make && make install && cd ..
fi
